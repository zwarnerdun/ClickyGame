{"version":3,"sources":["components/Home/Home.js","components/Title/Title.js","components/Friends/Friendscard.js","Container.js","Row.js","components/Wrapper/Wrapper.js","Column.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","className","href","title","id","correctincorrect","score","topScore","Title","children","FriendCard","value","onClick","handleClick","alt","name","src","image","Container","fluid","Row","Wrapper","Column","size","split","map","join","App","state","rockofriends","clicked","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffledFriends","array","i","length","j","Math","floor","random","shuffleFriends","this","topscore","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.096a0efa.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Home.css\";\n\nfunction Home (props){\n    return(\n        <nav>\n            <ul>\n                <li className=\"brand animated lightSpeedIn\">\n                    <a href=\"/ClickyGame\">{props.title}</a>\n                </li>\n\n                <li id=\"ci\">{props.correctincorrect}</li>\n\n                <li id=\"score\">Score: {props.score}</li>\n\n                <li id=\"top\">Top Score: {props.topScore}</li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Home;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h1 className=\"title\">{props.children}</h1>;\n\nexport default Title;","import React from \"react\";\nimport \"./Friend.css\";\n\nconst FriendCard = props => (\n  <div \n    className=\"card\" \n    value={props.id} \n    onClick={() => props.handleClick(props.id)}\n  >\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\n\nexport default FriendCard;","import React from \"react\";\n\nconst Container = props =>\n  <div className={`container${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Container;","import React from \"react\";\n\nconst Row = props =>\n  <div className={`row${props.fluid ? \"-fluid\" : \"\"}`}>\n    {props.children}\n  </div>;\n\nexport default Row;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\n\nconst Column = props => {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n  return (\n    <div className={size}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Column;","import React, {Component} from 'react';\nimport Home from \"./components/Home\"\nimport Title from \"./components/Title\";\nimport FriendCard from \"./components/Friends\";\nimport rockofriends from \"./rockofriends.json\";\nimport Container from \"./Container\";\nimport Row from \"./Row\";\nimport Wrapper from \"./components/Wrapper\"\nimport Column from \"./Column\";\nimport \"./App.css\"\n\nfunction shuffleFriends(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    let j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nclass App extends Component {\n  // Set this.state\n  state = {\n    rockofriends,\n    score: 0,\n    topScore: 0,\n    correctincorrect: \"\",\n    clicked: []\n  };\n\n  handleClick = id => {\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n  handleIncrement = () => {\n    const newScore = this.state.score + 1;\n    this.setState({\n      score: newScore,\n      correctincorrect: \"\"\n    });\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    } else if (newScore === 10) {\n      this.setState({ correctincorrect: \"That was a hoot!\" });\n    }\n\n    this.handleShuffle();\n  };\n  handleReset = () => {\n    this.setState({\n      score: 0,\n      topScore: this.state.topScore,\n      correctincorrect: \"Heh heh, oh my...\",\n      clicked: []\n    });\n    this.handleShuffle();\n  };\n\n  handleShuffle = () => {\n    let shuffledFriends = shuffleFriends(rockofriends);\n    this.setState({ rockofriends: shuffledFriends });\n  };\n  \n  render() {\n    return(\n      <Wrapper>\n        <Home\n          title=\"Rocko's Modern Life\"\n          score={this.state.score}\n          topscore={this.state.topScore}\n          correctincorrect={this.state.correctincorrect}\n        />\n        <Title>\n         Do not click on a duplicate, or you'll have a fit!\n        </Title>\n        <Container>\n          <Row>\n            {this.state.rockofriends.map(rockofriends => (\n              <Column size=\"md-3 sm-6\">\n                <FriendCard\n                  key={rockofriends.id}\n                  handleClick={this.handleClick}\n                  handleIncrement={this.handleIncrement}\n                  handleReset={this.handleReset}\n                  handleShuffle={this.handleShuffle}\n                  id={rockofriends.id}\n                  image={rockofriends.image}\n                />\n              </Column>\n            ))}\n          </Row>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}